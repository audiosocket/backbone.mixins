// Generated by CoffeeScript 1.3.1
(function() {
  var Backbone, _;

  if (typeof require !== "undefined" && require !== null) {
    Backbone = require("backbone");
    _ = require("underscore");
  } else {
    Backbone = window.Backbone;
    _ = window._;
  }

  Backbone.Ancestry = {
    getChildren: function() {
      var _ref;
      return (_ref = this.children) != null ? _ref : this.children = [];
    },
    getParent: function() {
      var _ref, _ref1;
      return (_ref = this.parent) != null ? _ref : this.parent = (_ref1 = this.options) != null ? _ref1.parent : void 0;
    },
    hasParent: function() {
      return !!this.getParent();
    },
    addChild: function(child) {
      child.parent = this;
      this.getChildren().push(child);
      return child;
    },
    createChild: function(kind, attributes, options) {
      var child;
      child = new kind(attributes, options);
      child.parent = this;
      this.addChild(child);
      return child;
    },
    eachChild: function(fn) {
      return _(this.getChildren()).chain().clone().each(fn);
    },
    removeChild: function(child) {
      this.getChildren().splice(_.indexOf(this.getChildren(), child), 1);
      return child;
    }
  };

  Backbone.LazyFetch = function(object) {
    var oldFetch;
    oldFetch = object.fetch;
    return _.extend(object, {
      fetch: function(options) {
        var cb, error, success, _base;
        if (options == null) {
          options = {};
        }
        if (!_.isEmpty(object.fetch.callbacks)) {
          return object.fetch.callbacks.push(options);
        }
        success = (options != null ? options.success : void 0) || function() {};
        error = (options != null ? options.error : void 0) || function() {};
        if (object.fetch.fetched) {
          return success(this, this.attributes);
        }
        (_base = object.fetch).callbacks || (_base.callbacks = []);
        object.fetch.callbacks.push({
          success: success,
          error: error
        });
        cb = function(name) {
          return function() {
            var args, callbacks, self;
            callbacks = object.fetch.callbacks;
            object.fetch.callbacks = [];
            self = this;
            args = arguments;
            if (name === "success") {
              object.fetch.fetched = true;
            }
            return _.each(callbacks, function(cb) {
              if ((cb != null ? cb[name] : void 0) != null) {
                return cb[name].apply(self, args);
              }
            });
          };
        };
        options = _.extend(options, {
          success: cb("success"),
          error: cb("error")
        });
        return oldFetch.call(this, options);
      }
    });
  };

  Backbone.Listenable = {
    listenTo: function(src, event, fn) {
      if (this.bindings == null) {
        this.bindings = [];
      }
      src.on(event, fn, this);
      this.bindings.push({
        event: event,
        fn: fn,
        src: src
      });
      return this;
    },
    stopListening: function(src) {
      var b, _i, _len, _ref;
      if (this.bindings != null) {
        _ref = this.bindings;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          b = _ref[_i];
          if (!src || b.src === src) {
            b.src.off(b.event, b.fn);
          }
        }
        this.bindings = [];
      }
      return this;
    }
  };

  Backbone.Tagged = {
    is: function(tag) {
      return _.include(this.get("tags"), tag);
    },
    addTag: function(tag) {
      var tags;
      tags = this.get("tags") || [];
      if (!_.include(tags, tag)) {
        tags.push(tag);
        return this.set({
          tags: tags
        });
      }
    },
    removeTag: function(tag) {
      var tags;
      tags = this.get("tags") || [];
      return this.set({
        tags: _.without(tags, tag)
      });
    }
  };

}).call(this);
