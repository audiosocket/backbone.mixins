// Generated by CoffeeScript 1.3.1
(function() {
  var Backbone, _;

  if (typeof require !== "undefined" && require !== null) {
    Backbone = require("backbone");
    _ = require("underscore");
  } else {
    Backbone = window.Backbone;
    _ = window._;
  }

  Backbone.AsynchronousFetch = function(object) {
    var oldFetch;
    oldFetch = object.fetch;
    return _.extend(object, {
      fetchTimeout: 700,
      fetchTask: null,
      ajaxFetch: false,
      asyncFetch: function(options) {
        var fn, trigger,
          _this = this;
        if (this.fetchTask != null) {
          clearTimeout(this.fetchTask);
          this.fetchTask = null;
          trigger = false;
        } else {
          trigger = true;
        }
        fn = function() {
          return _this.fetch(options);
        };
        this.fetchTask = setTimeout(fn, this.fetchTimeout);
        if (trigger) {
          return this.trigger("fetching");
        }
      },
      fetch: function(options) {
        var cb, error, self, success;
        if (options == null) {
          options = {};
        }
        if (this.fetchTask != null) {
          clearTimeout(this.fetchTask);
        } else {
          this.ajaxFetch = true;
          this.trigger("fetching");
        }
        self = this;
        cb = function() {
          self.ajaxFetch = false;
          self.fetchTask = null;
          return self.trigger("fetching");
        };
        success = options.success;
        options.success = function() {
          cb();
          if (success != null) {
            return success.call(this, arguments);
          }
        };
        error = options.error;
        options.error = function() {
          cb();
          if (error != null) {
            return error.call(this, arguments);
          }
        };
        return oldFetch.call(object, options);
      }
    });
  };

}).call(this);
